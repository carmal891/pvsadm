name: Upload Release Asset

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { os: darwin, arch: amd64 }
          - { os: darwin, arch: arm64 }
          - { os: linux, arch: amd64 }
          - { os: linux, arch: ppc64le }
          - { os: windows, arch: amd64 }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Get the target release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          mkdir -p bin/
          STATIC_FLAG='-w -extldflags "-static"'
          VERSION=${{ steps.get_version.outputs.VERSION }}
          CGO_ENABLED=0 GOOS=${{ matrix.platform.os }} GOARCH=${{ matrix.platform.arch }} \
            go build -a -tags netgo -ldflags "-X github.com/ppc64le-cloud/pvsadm/pkg/version.Version=${VERSION} ${STATIC_FLAG}" \
            -o bin/pvsadm-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          tar -czvf pvsadm-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.tar.gz -C bin/ pvsadm-${{ matrix.platform.os }}-${{ matrix.platform.arch }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pvsadm-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
          path: |
            bin/pvsadm-${{ matrix.platform.os }}-${{ matrix.platform.arch }}
            pvsadm-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-24.04
    if: ${{ success() }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: true

      - name: Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in ./downloaded-artifacts/**/*.tar.gz; do
            echo "Uploading tarball: $file..."
            gh release upload "${{ github.ref_name }}" "$file" --repo ${{ github.repository }}
          done
          for file in ./downloaded-artifacts/*/bin/*; do
            echo "Uploading binary: $file..."
            gh release upload "${{ github.ref_name }}" "$file" --repo ${{ github.repository }}
          done
